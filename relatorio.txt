################################################################################
#                                IME-USP (2018)                                #
#            MAC0219 - Programacao Concorrente e Paralela - MiniDesafio2       #
#                                                                              #
#                                  Relatorio                                   #
#                                                                              #
#                       Marcelo Schmitt   - NUSP 9297641                       #
#                       Raphael R. Gusmao - NUSP 9778561                       #
################################################################################


Criamos uma função que faz algumas contas várias vezes para ocupar a ULA e/ou 
FPU e então calculamos os tempos de execução desta função quando os cálculos
eram feitos usando uma variável do tipo long (para estressar a ULA), usando uma 
variável do tipo long com calculos envolvento números aleatórios, e usando uma
variável do tipo long double (para estressar a FPU). 

O processador da máquina em que testasmos o programa é um Intel Core i3-2350M
com quatro processadores, dos quais 2 são físicos e dois são lógicos 
(hyper-threads).

Os testes nos mostraram que:
* Uma CPU sem hyper-threading fazendo contas com variáveis do tipo long é cerca 
  de duas vezes mais lenta que uma CPU com hyper-threading.
* Uma CPU sem hyper-threading fazendo contas com variáveis do tipo long e 
  chamadas para a geração de números aleatórios é cerca de dez vezes mais rápida
  que uma CPU com hyper-threading habilitado.
* Uma CPU sem hyper-threading fazendo contas com variáveis do tipo long double
  é um pouco mais lenta que uma CPU com hyper-threading habilitado.

Tentamos ser o mais cuidadosos e precissos o possível na montagem do programa, 
analizando cuidadosamente quando iniciar e terminar a cronometragem do tempo
despendido por cada modo de execução. Também tomamos cuidado para garantir que
ambas a execuções (com e sem hyper-threading) efetuasem exatamente as mesmas 
contas.



O MiniDesafio2 recebe como argumento opcional o numero de threads que devem ser 
usadas. Se o argumento nao estiver presente executa com uma unica thread.

Para executar o MiniDesafio2 no terminal, digite:
    $ make
    $ ./desafio2
    ou
    $ make run

Uma saída típica do programa é:
//TODO
Exemplo de saida:
+------------------------------------------------------------------------------+
| Estado final da lagoa:
|
|   0 1 2 3 4 5
| 0 1 2 3 4 5 6



